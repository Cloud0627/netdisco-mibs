#!/usr/bin/env perl
# prepmibs new_dir
# The script will rename and organise files to help you.
# - Any items in "error" folder need manually inspecting
# - Take a look at items in the "ignore" folder, just in case.
# - Watch out for new entries that could be RFCs.
# - MIBs belonging to other vendors will be moved to "other" folder.
# - Run "prepmibs/importmibs" on each folder in "other" before continuing.
# - Renames known MIB files to be the same as the equiv in netdisco-mibs.

use strict;
use warnings;

use charnames ':full';
binmode STDOUT, ':utf8';

use List::Util 'max';
use File::Temp;
use File::Copy;
use File::Spec::Functions qw(splitdir catfile);
use Term::ANSIColor qw(:constants);

if (!defined $ENV{MIBHOME}) {
  print "error: must define \$MIBHOME (where the MIB dirs live)\n";
  exit(1);
}

$ENV{SNMPCONFPATH} = '';
$ENV{SNMP_PERSISTENT_DIR} = "$ENV{MIBHOME}/extras/indexes";
$ENV{MIBS} = 'SNMPv2-MIB';
$ENV{MIBDIRS} = "$ENV{MIBHOME}/net-snmp:$ENV{MIBHOME}/rfc:$ENV{MIBHOME}/cisco";

my $from = shift;
if (!defined $from or not -d $from) {
  print "usage: $0 new_dir (named same as old_dir and containing new MIBs)\n";
  exit(1);
}

my $vendor = (grep {m/\S/} splitdir($from))[-1];

my $to = catfile($ENV{MIBHOME}, $vendor);
if (! -d $to) {
  print "error: no directory in MIBHOME named $vendor\n";
  exit(1);
}

my $indexfile = catfile($ENV{SNMP_PERSISTENT_DIR}, 'mib_index2.txt');
if (! -f $indexfile) {
  print "error: missing mib_index2.txt (run mkcache then mkindex)\n";
  exit(1);
}

# load mib_index2.txt mapping all current known MIBs
my (%vendor_for, %oldfile_for, $currvendor);
open(my $index, '<', $indexfile) or die $!;
while (my $line = <$index>) {
  next if $line =~ m/^MIB Index/ or $line =~ m/^\s*$/;
  if ($line =~ m/^DIR\s+(\S+)/) {
    $currvendor = (grep {m/\S/} splitdir($1))[-1];
    next;
  }
  my ($mib, $file) = ($line =~ m/^(\S+)\s+(\S+)$/);

  # store mib-vendor mapping
  if (exists $vendor_for{$mib}) {
    print YELLOW, "\N{WARNING SIGN} ", MAGENTA, uc($mib), CYAN,
      "is duplicated in vendors $vendor_for{$mib} and $currvendor\n", RESET;
  }
  $vendor_for{$mib}  = $currvendor;
  $oldfile_for{$mib} = $file;
}
close $index;

# let net-snmp find MIBs in the new bundle
my ($mib_for, $file_for) = build_index($from);

my %res = ();
my %newfiles = map  {($_ => 1)}
               map  {(splitdir($_))[-1]}
               map  {chmod(0644, $_); $_}
               grep {-f} glob(catfile($from, '*'));

foreach my $mib (sort keys %{$file_for}) {
  my $mibfile = catfile($from, $file_for->{$mib});
  delete $newfiles{ $file_for->{$mib} };
  &status($mib);

  # check for multiple MIB defs within one file (net-snmp cannot detect)
  my @defs = qx(egrep '^\\s*\\w(\\w|-)+\\s+DEFINITIONS\\s*::=\\s*BEGIN' $mibfile);
  if (scalar @defs > 1) {
    $res{multi}->{ $file_for->{$mib} } = scalar @defs;
    next;
  }

  # check whether MIB is featured in another vendor's bundle
  if (exists $vendor_for{$mib} and $vendor_for{$mib} ne $vendor) {
    $res{other}->{$mib} = $vendor_for{$mib};
  }
  elsif (!exists $oldfile_for{$mib}) {
      $res{new}->{$mib} = 1;
  }
  else {
    my $oldmibfile = catfile($to, $oldfile_for{$mib});

    # Look for version numbers - https://tools.ietf.org/html/rfc2578
    my $oldv = max(qx(egrep -A1 '(REVISION|LAST-UPDATED)' '$oldmibfile')
      =~ m/"(\d{10}|\d{12})Z?"/g);
    my $newv = max(qx(egrep -A1 '(REVISION|LAST-UPDATED)' '$mibfile')
      =~ m/"(\d{10}|\d{12})Z?"/g);

    if ($oldv and $newv) {
      if (length($oldv) == 10) {
        $oldv = ($oldv =~ m/^[789]/) ? "19$oldv" : "20$oldv";
      }
      if (length($newv) == 10) {
        $newv = ($newv =~ m/^[789]/) ? "19$newv" : "20$newv";
      }

      if ($oldv < $newv) {
        $res{newer}->{$mib} = [$newv, $oldv];
      }
      elsif ($oldv > $newv) {
        $res{older}->{$mib} = [$newv, $oldv];
      }
      else {
        $res{same}->{$mib} = 1;
      }
    }
    else {
      $res{nover}->{$mib} = 1;
    }
  }
}

# show files being ignored by this script
$res{ignore} = \%newfiles;
&status('Preparing to organise files...');

foreach (qw(other ignore older same)) {
  mkdir(catfile($from, $_)) if scalar keys %{$res{$_}};
}
if (scalar keys %{$res{other}}) {
  mkdir(catfile($from, 'other', $_)) for values %{$res{other}};
}
mkdir(catfile($from, 'error')) if scalar keys %{$res{multi}}
                                  or scalar keys %{$res{nover}};

print "\r\e[K"; # blank line

foreach my $mib (sort keys %{$res{other}}) {
  print RED, "\N{HEAVY BALLOT X} ", MAGENTA, uc($mib), CYAN,
    " is already featured within vendor ", MAGENTA, $res{other}->{$mib};
  print CLEAR, FAINT, " (in '$oldfile_for{$mib}')" if uc($mib) ne $oldfile_for{$mib};
  print "\n", RESET;
  move(catfile($from, $file_for->{$mib}),
       catfile($from, 'other', $res{other}->{$mib}, $oldfile_for{$mib}))
    or die $!;
}

foreach my $mib (sort keys %{$res{older}}) {
  my ($newv, $oldv) = @{ $res{older}->{$mib} };
  print FAINT, "\N{LESS-THAN SIGN} ", uc($mib), " is older ($newv < $oldv)";
  print " (in '$oldfile_for{$mib}')" if uc($mib) ne $oldfile_for{$mib};
  print "\n", RESET;
  move(catfile($from, $file_for->{$mib}),
       catfile($from, 'older', $oldfile_for{$mib})) or die $!;
}

foreach my $mib (sort keys %{$res{same}}) {
  print FAINT, "\N{EQUALS SIGN} ", uc($mib), " is the same revision";
  print " (in '$oldfile_for{$mib}')" if uc($mib) ne $oldfile_for{$mib};
  print "\n", RESET;
  move(catfile($from, $file_for->{$mib}),
       catfile($from, 'same', $oldfile_for{$mib}))
    or die $!;
}

foreach my $mib (sort keys %{$res{newer}}) {
  my ($newv, $oldv) = @{ $res{newer}->{$mib} };
  print YELLOW, "\N{GREATER-THAN SIGN} ", GREEN, uc($mib),
    CYAN, " is newer ($newv > $oldv)";
  print CLEAR, FAINT, " (in '$oldfile_for{$mib}')" if uc($mib) ne $oldfile_for{$mib};
  print "\n", RESET;
  move(catfile($from, $file_for->{$mib}),
       catfile($from, $oldfile_for{$mib}))
    or die $!;
}

foreach my $mib (sort keys %{$res{new}}) {
  print YELLOW, "\N{BLACK SMALL STAR} ", GREEN, uc($mib), CLEAR, FAINT;
  print (" (in '". $file_for->{$mib} ."')") if uc($mib) ne $file_for->{$mib};
  print "\n", RESET;
}

foreach my $mib (sort keys %{$res{nover}}) {
  print RED, "\N{HEAVY BALLOT X} ", MAGENTA, uc($mib),
    CYAN, " has no parseable revision date";
  print CLEAR, FAINT, " (in '$oldfile_for{$mib}')" if uc($mib) ne $oldfile_for{$mib};
  print "\n", RESET;
  move(catfile($from, $file_for->{$mib}),
       catfile($from, 'error', $oldfile_for{$mib}))
    or die $!;
}

foreach my $file (sort keys %{$res{multi}}) {
  print RED, "\N{HEAVY BALLOT X} ", CYAN, 'file ', MAGENTA, $file,
    CYAN, " defines multiple (", $res{multi}->{$file}, ") MIBs\n", RESET;
  move(catfile($from, $file), catfile($from, 'error')) or die $!;
}

foreach my $file (sort keys %{$res{ignore}}) {
  print YELLOW, "\N{WARNING SIGN} ", CYAN, 'file ', MAGENTA,
    $file, CYAN, " is not a MIB\n", RESET;
  move(catfile($from, $file), catfile($from, 'ignore')) or die $!;
}

if (scalar grep {-f} glob(catfile($from, 'error', '*'))) {
  print "\N{BLACK FLAG} MIBs inspected, with errors.\n";
  exit(1);
}
else {
  print "\N{HEAVY CHECK MARK} MIBs ready for import.\n";
  exit(0);
}

sub build_index {
  my $bundle = shift;
  my (%mib_for, %file_for);

  my $tmpdir = File::Temp->newdir();
  $ENV{SNMP_PERSISTENT_DIR} = $tmpdir->dirname;
  qx(snmptranslate -IR sysName 2>&1 >/dev/null);
  my $newmibdirs = $ENV{MIBDIRS} .":$bundle";
  qx(snmptranslate -M'$newmibdirs' -IR sysName 2>\&1 >/dev/null);
  $ENV{SNMP_PERSISTENT_DIR} = "$ENV{MIBHOME}/extras/indexes";

  # read the MIBs that net-snmp likes (file '3' is the vendor)
  open(my $cache, '<', "$tmpdir/mib_indexes/3") or die $!;
  while (my $line = <$cache>) {
    next if $line =~ m/^DIR /;
    my ($mib, $file) = ($line =~ m/^(\S+)\s+(\S+)$/);

    # store mib-file mapping
    $mib_for{$file} = $mib;
    $file_for{$mib} = $file;
  }
  close $cache;

  return (\%mib_for, \%file_for);
}

my $i = undef;
sub status {
  my $note = (shift || '');
  my %spinner = (
    "\N{BRAILLE PATTERN DOTS-2345678}" => "\N{BRAILLE PATTERN DOTS-1235678}",
    "\N{BRAILLE PATTERN DOTS-1235678}" => "\N{BRAILLE PATTERN DOTS-1234678}",
    "\N{BRAILLE PATTERN DOTS-1234678}" => "\N{BRAILLE PATTERN DOTS-1234578}",
    "\N{BRAILLE PATTERN DOTS-1234578}" => "\N{BRAILLE PATTERN DOTS-1234567}",
    "\N{BRAILLE PATTERN DOTS-1234567}" => "\N{BRAILLE PATTERN DOTS-1234568}",
    "\N{BRAILLE PATTERN DOTS-1234568}" => "\N{BRAILLE PATTERN DOTS-1245678}",
    "\N{BRAILLE PATTERN DOTS-1245678}" => "\N{BRAILLE PATTERN DOTS-1345678}",
    "\N{BRAILLE PATTERN DOTS-1345678}" => "\N{BRAILLE PATTERN DOTS-2345678}"
  );
  $i = (!defined $i) ? "\N{BRAILLE PATTERN DOTS-2345678}" : $spinner{$i};
  print "\r\e[K"; # blank line
  print YELLOW, "$i ", CYAN, $note, RESET;
}
